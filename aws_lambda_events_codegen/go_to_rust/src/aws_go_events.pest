newline = _{ "\n" | "\r\n" | eoi }
whitespace = _{ " " | "\t" }
whitespace_or_newline = _{ whitespace | newline }
comment_line = @{ whitespace* ~ any_comment ~ whitespace* }
any_comment = { block_comment | "//" ~ (!newline ~ any)* }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ any)* ~ "*/" }
pointer = { "*" }

alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
non_alpha = _{ "_" | "-" }

ident = { (alpha | digit | non_alpha)+ }
ident_list = _{ !digit ~ ident ~ (" " ~ ident)+ }

// Built-in types --------------------------------------------------------------
// Primitives
boolean = { "bool" }
byte = { "byte" }
int = ${ "int" ~ ("32" | "64")* }
uint = ${ "uint" ~ ("32" | "64")* }
float = ${ "float" ~ ("32" | "64")* }
string = { "string" }
primitive = { boolean | byte | int | uint | float | string }

// Non-primitives
interface = { "interface" ~ "{" ~ "}"}
array = { "[]" ~ (interface | primitive | map | array | ident) }

// Collections. This isn't 100% correct but whatever.
key_type = { primitive }
pointer_type = { pointer ~ value_type }
value_type = { pointer_type | interface | primitive | array | ident }
map = { "map[" ~ key_type ~ "]" ~ value_type }

non_primitive = { map | array | interface }

package_ident = ${ ident ~ ("." ~ ident)+ }

// Structure types -------------------------------------------------------------
json_name = { (digit | alpha | non_alpha | "." )+ }
omit_empty = { "," ~ "omitempty" }
json_meta = _{ json_name ~ omit_empty? }
json_mapping = { "`json:\"" ~ json_meta ~ "\"`" ~ whitespace* ~ any_comment?  }

struct_field_type = { interface | primitive | array | map | package_ident | ident }
struct_embedded_field = { ident }
struct_field_decl = { ( ident ~ whitespace+ ~ pointer? ~ struct_field_type ) | struct_embedded_field }
struct_field = ${ (whitespace* ~ doc_comment)* ~ whitespace* ~ struct_field_decl ~ whitespace* ~ json_mapping? }

struct_fields = { struct_field ~ (newline+ ~ struct_field)* }

struct_name = { ident }
struct_preamble = ${ "type" ~ whitespace+ ~ struct_name ~ whitespace+ ~ "struct" }

doc_comment = { any_comment ~ newline }
struct_def = { doc_comment* ~ struct_preamble ~ "{" ~ whitespace_or_newline* ~ struct_fields? ~ whitespace_or_newline* ~ "}" }

// Package types ---------------------------------------------------------------
package_kw = _{ "package" }
package_def = { package_kw ~ ident }

// Import types ----------------------------------------------------------------
import_kw = _{ "import" }
package_name = { (alpha | digit | non_alpha | "/")+ }
import_package = ${ "\"" ~ package_name ~ "\"" }
import = { import_kw ~ import_package  }
import_multiple = ${ import_kw ~ whitespace+ ~ "(" ~ (whitespace_or_newline* ~ import_package ~ whitespace_or_newline*)+ ~ ")" }

// Type alias types ------------------------------------------------------------
type_kw = _{ "type" }
type_alias_target = { interface | primitive | array | map | ident }
package_type_alias = { type_kw ~ whitespace+ ~ ident ~ whitespace+ ~ package_ident }
local_type_alias = { type_kw ~ whitespace+ ~ ident ~ whitespace+ ~ type_alias_target }
type_alias = ${ package_type_alias | local_type_alias }

// Function types --------------------------------------------------------------
function_kw = _{ "func" }
// XXX: This is ugggggly and barely works.
string_literal = ${ "\"" ~ (!("\"" | newline) ~ any)* ~ "\"" }
op = { "==" | "!=" | "<" | ">" | "<=" | ">=" }
conditional = ${ ident ~ whitespace* ~ op ~ whitespace* ~ ident}
if_stmt = ${ "if" ~ whitespace+ ~ conditional ~ whitespace+ ~ block }
indexed_ident = ${ ident ~ ("." ~ ident)* }
assignment = ${ ident ~ whitespace* ~ ":=" ~ whitespace* ~ "&"? ~ indexed_ident ~ "{}" }

content_with_brackets = ${ string_literal | if_stmt | assignment }
content_without_brackets = { !("{" | "}" | newline) ~ any }

content = {  content_with_brackets | content_without_brackets }
stmt = ${ (!newline ~ content)* ~ newline }
expression = { block | stmt }
block = ${ "{" ~ whitespace_or_newline* ~ expression* ~ whitespace_or_newline* ~ "}" }
single_return = { primitive | non_primitive | ident }
multiple_return = ${ "(" ~ single_return ~ ("," ~ whitespace* ~ single_return)+ ~ ")" }
named_return = ${ ident ~ whitespace+ ~ ident }
multiple_named_return = ${ "(" ~ named_return ~ ("," ~ whitespace* ~ named_return)+ ~ ")" }
function_return = { single_return | multiple_return | named_return | multiple_named_return }

function_arg_type = { primitive | non_primitive | ident }
function_arg = ${ ident ~ (whitespace+ ~ function_arg_type)? }
function_args = _{ function_arg ~ ("," ~ whitespace* ~ function_arg)* }

pointer_receiver = ${ "(" ~ whitespace* ~ ident ~ whitespace+ ~ pointer? ~ whitespace* ~ ident ~ whitespace* ~ ")" }
function = ${
  function_kw ~ whitespace+ ~
  pointer_receiver? ~ whitespace* ~
  ident ~ whitespace* ~
  "(" ~ whitespace* ~ function_args? ~ whitespace* ~ ")" ~ whitespace* ~
  function_return? ~ whitespace* ~
  block
}

// Constant type ---------------------------------------------------------------
constant_kw = _{ "const" }
constant_def = ${ constant_kw ~ whitespace+ ~ ident ~ whitespace* ~ "=" ~ whitespace* ~ (!newline ~ any)+ ~ newline  }

// "Enum" type ---------------------------------------------------------------
enum_options = {constant_kw ~ "(" ~ (!")" ~ any)* ~ ")" }

// Top-level type --------------------------------------------------------------
all = _{ enum_options | constant_def | function | package_def | import | import_multiple | struct_def | type_alias | any_comment }
aws_go_events = _{  (newline? ~ newline? ~ all ~ newline)+  }
